// src/components/pages/AgentsPage.jsx

import React, { useState, useEffect, useCallback, useMemo } from 'react';
// import api from '../../utils/api'; // ‚ö†Ô∏è –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
import { useNavigate } from 'react-router-dom';

// --- –ú–æ–∫–æ–≤—ã–µ –î–∞–Ω–Ω—ã–µ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏) ---
const MOCK_AGENTS_DATA = {
    items: [
        {
            id: 1,
            name: 'Agent-Europe-01',
            region: 'Germany (Frankfurt)',
            local_ip: '192.168.1.10',
            public_ip: '87.165.4.21',
            status: 'active', // –ê–∫—Ç–∏–≤–µ–Ω
            last_heartbeat: '2025-10-25T17:55:00Z',
            created_at: '2025-09-01T10:00:00Z',
        },
        {
            id: 2,
            name: 'Agent-USA-Dallas',
            region: 'USA (Dallas, TX)',
            local_ip: '172.16.0.5',
            public_ip: '104.28.1.12',
            status: 'inactive', // –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
            last_heartbeat: '2025-10-25T16:00:00Z',
            created_at: '2025-09-15T12:30:00Z',
        },
        {
            id: 3,
            name: 'Agent-Asia-Tokyo',
            region: 'Japan (Tokyo)',
            local_ip: '10.0.0.8',
            public_ip: '133.12.3.45',
            status: 'setup', // –û–∂–∏–¥–∞–Ω–∏–µ
            last_heartbeat: '2025-10-25T17:59:00Z',
            created_at: '2025-10-20T09:00:00Z',
        },
    ],
    // –ü–∞–≥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è —É–¥–∞–ª–µ–Ω—ã
};
// ------------------------------------------

// --- –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString('ru-RU', { timeZoneName: 'short' });
};
// -------------------------------------------

// --- –ó–∞–≥–ª—É—à–∫–∏ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è Pagination) ---

const Table = ({ items, columns, onAction, onItemClick }) => {
    if (!items || items.length === 0) {
        return <p style={{ textAlign: 'center', marginTop: '30px', fontFamily: 'JetBrains Mono, monospace' }}>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.</p>;
    }

    return (
        <table style={{ 
            width: '100%', 
            borderCollapse: 'collapse', 
            marginTop: '20px', 
            fontFamily: 'JetBrains Mono, monospace',
            borderRadius: '8px',
            overflow: 'hidden', 
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)' 
        }}>
            <thead>
                <tr style={{ 
                    backgroundColor: '#007bff', 
                    color: 'white', 
                    borderBottom: '2px solid #ccc' 
                }}>
                    {columns.map(col => (
                        <th key={col.fieldName} style={{ 
                            padding: '12px 10px', 
                            textAlign: 'left', 
                            fontWeight: '700' 
                        }}>{col.columnName}</th>
                    ))}
                    <th style={{ 
                        padding: '12px 10px', 
                        textAlign: 'right', 
                        fontWeight: '700' 
                    }}>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                {items.map(item => (
                    <tr 
                        key={item.id} 
                        style={{ 
                            borderBottom: '1px solid #ddd', 
                            cursor: 'pointer',
                            transition: 'background-color 0.2s',
                            backgroundColor: 'white', 
                        }}
                        onMouseEnter={(e) => e.currentTarget.style.backgroundColor = '#f0f0f0'}
                        onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'white'}
                        onClick={() => onItemClick(item)} 
                    >
                        {columns.map(col => (
                            <td key={col.fieldName} style={{ padding: '10px', color: '#000' }}>
                                {col.formatter ? col.formatter(item) : item[col.fieldName]}
                            </td>
                        ))}
                        <td style={{ padding: '10px', textAlign: 'right' }}>
                            <button
                                onClick={(e) => { e.stopPropagation(); onAction(item.id, 'delete'); }}
                                style={{ 
                                    backgroundColor: 'red', 
                                    color: 'white', 
                                    border: 'none', 
                                    padding: '5px 10px', 
                                    borderRadius: '4px',
                                    cursor: 'pointer',
                                    fontFamily: 'JetBrains Mono, monospace'
                                }}
                            >
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
    );
};

const ErrorMessage = ({ message }) => (
    <p style={{ color: 'red', marginBottom: '15px', fontSize: '0.9em', fontFamily: 'JetBrains Mono, monospace' }}>
        {message}
    </p>
);

const Button = ({ title, onClick, disabled = false }) => (
    <button
        onClick={onClick}
        disabled={disabled}
        style={{
            padding: '10px 20px',
            backgroundColor: '#007bff', 
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: disabled ? 'not-allowed' : 'pointer',
            fontSize: '1em',
            fontWeight: 'bold',
            marginTop: '20px',
            fontFamily: 'JetBrains Mono, monospace',
        }}
    >
        {title}
    </button>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Pagination —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–û–õ–ë–¶–û–í ---
const AGENT_COLUMNS = [
    { fieldName: 'name', columnName: '–ù–∞–∑–≤–∞–Ω–∏–µ' },
    { fieldName: 'region', columnName: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è' },
    { 
        fieldName: 'status', 
        columnName: '–°—Ç–∞—Ç—É—Å',
        formatter: (item) => {
            if (item.status === 'active') return '–ê–∫—Ç–∏–≤–µ–Ω';
            if (item.status === 'inactive') return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
            if (item.status === 'setup') return '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞';
            return 'N/A';
        }
    },
    { 
        fieldName: 'last_heartbeat', 
        columnName: '–•–∞—Ä—Ç–±–∏—Ç',
        formatter: (item) => formatDate(item.last_heartbeat)
    },
    { fieldName: 'public_ip', columnName: 'IP' },
    { 
        fieldName: 'created_at', 
        columnName: '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        formatter: (item) => formatDate(item.created_at)
    },
];

function AgentsPage() {
    const navigate = useNavigate();
    
    // üí° –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
    const [agents, setAgents] = useState([]);
    
    const [errorMessage, setErrorMessage] = useState('');
    const [activeAgent, setActiveAgent] = useState(null); 
    
    // --- –õ–æ–≥–∏–∫–∞ –ó–∞–≥—Ä—É–∑–∫–∏: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏) ---
    const loadAgents = useCallback(async () => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 500)); 
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ items
        setAgents(MOCK_AGENTS_DATA.items);
        setErrorMessage('');
    }, []);

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–≥–ª—É—à–∫–∏) ---

    const openCreateModal = () => {
        console.log('–ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ê–≥–µ–Ω—Ç–∞" –Ω–∞–∂–∞—Ç–∞. –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É...');
        setActiveAgent({}); 
    };

    const handleShowAgent = (agent) => {
        console.log('–ö–ª–∏–∫ –ø–æ –∞–≥–µ–Ω—Ç—É:', agent);
        setActiveAgent({ ...agent }); 
    };

    const handleAgentDelete = (id) => {
        if (!window.confirm(`[–ú–û–ö] –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ ID: ${id}?`)) return;

        console.log(`[–ú–û–ö] –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ ${id}...`);
        
        const updatedItems = agents.filter(item => item.id !== id);
        setAgents(updatedItems);
        
        setErrorMessage(`[–ú–û–ö] –ê–≥–µ–Ω—Ç ${id} —É–¥–∞–ª–µ–Ω! (–í –∫–æ–Ω—Å–æ–ª–∏)`);
        setActiveAgent(null);
    };
    
    useEffect(() => {
        loadAgents();
    }, [loadAgents]); 

    return (
        <div className="agents-wrapper">
            
            <div className="agents-page">
                <h1 style={{ fontFamily: 'JetBrains Mono, monospace', color: '#000', marginTop: '4rem' }}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≥–µ–Ω—Ç–∞–º–∏</h1>
                
                {errorMessage && <ErrorMessage message={errorMessage} />}
                
                <Table 
                    items={agents} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π state
                    columns={AGENT_COLUMNS} 
                    onItemClick={handleShowAgent}
                    onAction={handleAgentDelete} 
                />
                
                <Button 
                    title="–î–æ–±–∞–≤–∏—Ç—å –ê–≥–µ–Ω—Ç–∞" 
                    onClick={openCreateModal} 
                />
                
            </div>
        </div>
    );
}

export default AgentsPage;