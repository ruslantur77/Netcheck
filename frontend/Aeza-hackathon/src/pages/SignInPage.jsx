// src/components/pages/SignInPage.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api, { setGlobalNavigator } from '../utils/api'; 


const Logo = () => (
    <div style={{ marginBottom: '1.5em', marginTop: '1.5em' }}>
        <img
            src="/logo.svg"
            alt="Project Logo"
            style={{ margin: '0 auto' }}
        />
        <h2 style={{
            marginTop: '20px',
            marginBottom: '10px',
            color: '#000',
            fontFamily: 'JetBrains Mono, monospace',
            fontWeight: 'bold'
        }}>
            –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        </h2>
    </div>
);


const AuthInput = ({ title, type, isWrong, value, onChange }) => (
    <div style={{ marginBottom: '15px' }}>
        <label style={{ display: 'block', textAlign: 'left', marginBottom: '5px', fontFamily: 'JetBrains Mono, monospace', color: '#000' }}>
            {title.charAt(0).toUpperCase() + title.slice(1)}
        </label>
        <input
            type={type}
            placeholder={title}
            value={value}
            onChange={onChange}
            style={{
                width: '100%',
                padding: '10px',
                border: `1px solid ${isWrong ? 'red' : '#ccc'}`,
                borderRadius: '4px',
                boxSizing: 'border-box',
                fontFamily: 'JetBrains Mono, monospace', 
                color: '#000', 
            }}
        />
    </div>
);

const ErrorMessage = ({ message }) => (
    <p style={{ color: 'red', marginBottom: '15px', fontSize: '0.9em', fontFamily: 'JetBrains Mono, monospace' }}>
        {message}
    </p>
);

const Button = ({ title, type, loading, onClick }) => (
    <button
        type={type}
        disabled={loading}
        onClick={onClick}
        style={{
            width: '100%',
            padding: '12px',
            backgroundColor: '#007bff', 
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: loading ? 'not-allowed' : 'pointer',
            fontSize: '1em',
            fontWeight: 'bold',
            marginTop: '10px',
            opacity: loading ? 0.6 : 1,
            transition: 'background-color 0.3s',
            fontFamily: 'JetBrains Mono, monospace', 
        }}
    >
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : title}
    </button>
);


const ERROR_MESSAGES = {
    400: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
    422: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
    401: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.',
    404: '–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
    500: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
};

function SignInPage() {
    const navigate = useNavigate();
    useEffect(() => {
        setGlobalNavigator(navigate);
    }, [navigate]); 

    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [emailWrong, setEmailWrong] = useState(false);
    const [passwordWrong, setPasswordWrong] = useState(false);
    const [loading, setLoading] = useState(false);
    const [errorMessage, setErrorMessage] = useState('');

    const validateFields = () => {
        const isEmailValid = !!email.trim();
        const isPasswordValid = !!password.trim();
        setEmailWrong(!isEmailValid);
        setPasswordWrong(!isPasswordValid);
        return isEmailValid && isPasswordValid;
    };

    // üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–ê–°–¢–†–û–ï–ù–ù–´–ô API –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∏
    const handleSubmit = async (event) => {
        event.preventDefault();

        setEmailWrong(false);
        setPasswordWrong(false);
        setErrorMessage('');

        if (!validateFields()) return;

        setLoading(true);

        try {
            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º Vue –∫–æ–¥–µ)
            const form = new FormData();
            form.append('username', email); // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±—ç–∫–µ–Ω–¥—É
            form.append('password', password);

            // ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π 'api' (—Å –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä–∞–º–∏)
            // –î–æ–±–∞–≤–ª—è–µ–º skipRefresh: true, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω –≤–æ –≤—Ä–µ–º—è —Å–∞–º–æ–≥–æ –ª–æ–≥–∏–Ω–∞.
            const response = await api.post('/api/auth/login', form, { 
                skipRefresh: true,
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
            });

            // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            const accessToken = response.data.access_token;
            localStorage.setItem('token', accessToken);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ 'api')
            api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≥–µ–Ω—Ç–æ–≤
            navigate('/agents'); 
        } catch (err) {
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–µ–π
            setEmailWrong(true);
            setPasswordWrong(true);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
            if (err.response) {
                const status = err.response.status;
                setErrorMessage(
                    ERROR_MESSAGES[status] || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.'
                );
            } else {
                setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.');
            }
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="auth-wrapper">
            <div className="auth-page">
                <Logo />
                <form noValidate onSubmit={handleSubmit}>
                    <AuthInput
                        title="email"
                        type="email"
                        isWrong={emailWrong}
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    <AuthInput
                        title="password"
                        type="password"
                        isWrong={passwordWrong}
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                    />

                    {errorMessage && <ErrorMessage message={errorMessage} />}

                    <Button title="–í—Ö–æ–¥" type="submit" loading={loading} />
                </form>
            </div>
        </div>
    );
}

export default SignInPage;