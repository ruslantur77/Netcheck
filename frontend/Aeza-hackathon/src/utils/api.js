// src/utils/api.js

import axios from 'axios';

// --- –ù–ê–í–ò–ì–ê–¶–ò–Ø –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (–¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ 401) ---

let globalNavigate = (path) => {
    console.error(`Router not initialized. Tried to navigate to: ${path}`);
};

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ —Ä–æ—É—Ç–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, useHistory –∏–ª–∏ useNavigate)
 * –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è refresh-—Ç–æ–∫–µ–Ω–∞.
 */
export const setGlobalNavigator = (navigateFunction) => {
    globalNavigate = navigateFunction;
};

// --- –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê AXIOS –ò –ò–ù–¢–ï–†–¶–ï–ü–¢–û–†–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ---

const instance = axios.create({
    baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8000',
    timeout: 5000,
    withCredentials: true,
});

let isRefreshing = false;
let failedQueue = [];

const processQueue = (error, token = null) => {
    failedQueue.forEach((p) => (error ? p.reject(error) : p.resolve(token)));
    failedQueue = [];
};

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
instance.interceptors.request.use((config) => {
    const token = localStorage.getItem('token');
    if (token) config.headers.Authorization = `Bearer ${token}`;
    return config;
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 401 (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)
instance.interceptors.response.use(
    (res) => res,
    async (err) => {
        const originalRequest = err.config;

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞, –∏–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        if (!originalRequest || originalRequest.skipRefresh || originalRequest._retry) {
            return Promise.reject(err);
        }

        // 401 Unauthorized
        if (err.response?.status === 401) {

            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, —Å—Ç–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
            if (isRefreshing) {
                return new Promise((resolve, reject) => {
                    failedQueue.push({ resolve, reject });
                }).then((token) => {
                    originalRequest.headers.Authorization = `Bearer ${token}`;
                    return instance(originalRequest);
                });
            }

            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            originalRequest._retry = true;
            isRefreshing = true;

            try {
                // 1. –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ skipRefresh: true)
                const { data } = await instance.post('/api/auth/refresh', null, { skipRefresh: true });
                localStorage.setItem('token', data.access_token);
                instance.defaults.headers.Authorization = `Bearer ${data.access_token}`;

                // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                processQueue(null, data.access_token);

                // 3. –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                originalRequest.headers.Authorization = `Bearer ${data.access_token}`;
                return instance(originalRequest);
            } catch (error) {
                // –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (refresh —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω)
                processQueue(error, null);
                localStorage.removeItem('token');

                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                globalNavigate('/signin');
                return Promise.reject(error);
            } finally {
                isRefreshing = false;
            }
        }

        return Promise.reject(err);
    }
);

// --- –§–£–ù–ö–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–õ–Ø InfoBlock (–û—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

const formatPingResponse = (responses, host) => {
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∞–≥–µ–Ω—Ç–∞–º
    const results = responses.filter(r => r.success).map(r => r.result.latency_ms);
    const count = results.length;

    if (count === 0) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –Ω–æ –∑–∞–ø—Ä–æ—Å—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å, –∏—â–µ–º –æ—à–∏–±–∫—É
        const errorResponse = responses.find(r => !r.success);
        return [{ label: '–°—Ç–∞—Ç—É—Å', value: errorResponse ? `–û—à–∏–±–∫–∞: ${errorResponse.error}` : '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤' }];
    }

    const min = Math.min(...results);
    const max = Math.max(...results);
    const avg = results.reduce((sum, val) => sum + val, 0) / count;

    return [
        { label: 'Host', value: host },
        { label: '–ê–≥–µ–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–æ', value: `${count} –∏–∑ ${responses.length}` },
        { label: '–ú–∏–Ω–∏–º—É–º (–º—Å)', value: `${min.toFixed(2)}` },
        { label: '–°—Ä–µ–¥–Ω–µ–µ (–º—Å)', value: `${avg.toFixed(2)}` },
        { label: '–ú–∞–∫—Å–∏–º—É–º (–º—Å)', value: `${max.toFixed(2)}` },
    ];
};

const formatHttpResponse = (responses, host) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
    const firstSuccess = responses.find(r => r.success);

    if (!firstSuccess) {
        const errorResponse = responses.find(r => !r.success);
        return [{ label: '–°—Ç–∞—Ç—É—Å', value: errorResponse ? `HTTP-–æ—à–∏–±–∫–∞: ${errorResponse.error}` : 'HTTP-–æ—à–∏–±–∫–∞' }];
    }

    const res = firstSuccess.result;
    const latency = firstSuccess.latency_ms.toFixed(2);
    const serverHeader = res.headers['Server'] || 'N/A';
    const contentType = res.headers['Content-Type'] || 'N/A';

    return [
        { label: 'Host', value: host },
        { label: '–°—Ç–∞—Ç—É—Å', value: `${res.status_code} ${res.redirected ? '(–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ)' : ''}` },
        { label: '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º—Å)', value: `${latency}` },
        { label: '–°–µ—Ä–≤–µ—Ä', value: serverHeader },
        { label: 'Content-Type', value: contentType },
        { label: '–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', value: `${res.content_length} –±–∞–π—Ç` },
    ];
};

const formatTcpResponse = (responses, host, port) => {
    const successCount = responses.filter(r => r.success && r.result.success_connect).length;
    const totalCount = responses.length;

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞
    const avgLatency = responses
        .filter(r => r.success && r.result.success_connect)
        .map(r => r.latency_ms)
        .reduce((sum, val, _, arr) => sum + val / arr.length, 0);

    let status;
    if (successCount === totalCount) {
        status = '–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç';
    } else if (successCount > 0) {
        status = `–ß–∞—Å—Ç–∏—á–Ω–æ –æ—Ç–∫—Ä—ã—Ç (${successCount}/${totalCount})`;
    } else {
        status = '–ó–∞–∫—Ä—ã—Ç –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è';
    }

    return [
        { label: 'Host', value: host },
        { label: '–ü–æ—Ä—Ç', value: String(port) || '–ù–µ —É–∫–∞–∑–∞–Ω' },
        { label: '–°—Ç–∞—Ç—É—Å', value: status },
        { label: '–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)', value: avgLatency > 0 ? avgLatency.toFixed(2) : 'N/A' },
    ];
};

const formatDnsResponse = (responses, host) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ DNS –æ–±—ã—á–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤
    const firstSuccess = responses.find(r => r.success);

    if (!firstSuccess) {
        const errorResponse = responses.find(r => !r.success);
        return [{ label: '–°—Ç–∞—Ç—É—Å', value: errorResponse ? `DNS-–æ—à–∏–±–∫–∞: ${errorResponse.error}` : 'DNS-–æ—à–∏–±–∫–∞' }];
    }

    const res = firstSuccess.result;
    const aRecords = (res.a_records || []).join(', ');
    const mxRecords = (res.mx_records || []).map(r => r.split(' ')[0]).join(', ');

    return [
        { label: 'Host', value: host },
        { label: 'A Records', value: aRecords || 'N/A' },
        { label: 'AAAA Records', value: (res.aaaa_records || []).join(', ') || 'N/A' },
        { label: 'MX Records', value: mxRecords || 'N/A' },
        { label: 'NS Records', value: (res.ns_records || []).join(', ') || 'N/A' },
    ];
};


// üí° –ù–û–í–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö API
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ InfoBlock
const formatErrorResult = (checkType, host) => {
    return {
        title: checkType.toUpperCase(),
        data: [
            { label: 'Host', value: host },
            { label: '–°—Ç–∞—Ç—É—Å', value: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.' },
            { label: '–î–µ—Ç–∞–ª–∏', value: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.' },
        ],
        isPending: false,
    };
};


// --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò API (–ù–∞—Å—Ç–æ—è—â–∏–µ –≤—ã–∑–æ–≤—ã) ---

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
 * POST: /api/v1/check
 */
export const createCheck = async (host, checkType, port = 0) => {
    try {
        const payload = {
            request_type: checkType,
            host: host,
            // –ü–æ—Ä—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è TCP_CONNECT, –∏–Ω–∞—á–µ 0
            port: checkType === 'TCP_CONNECT' ? port : 0,
        };

        const response = await instance.post('/api/v1/check', payload);

        // API –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å request_id
        return response.data;

    } catch (error) {
        console.error(`[API] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${checkType}:`, error);
        // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (MainContainer) –º–æ–≥–ª–∞ –µ–µ –ø–æ–π–º–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
    }
};


/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ ID.
 * GET: /api/v1/check/{task_id}
 */
export const getCheckResult = async (taskId, checkType, host, port) => {
    try {
        const response = await instance.get(`/api/v1/check/${taskId}`);
        const rawResult = response.data;

        // –ï—Å–ª–∏ responses –µ—â–µ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
        if (!rawResult.responses || rawResult.responses.length === 0) {
            return {
                isPending: true, // –§–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–ø—Ä–æ—Å
                title: checkType.toUpperCase(),
                data: [{ label: '–°—Ç–∞—Ç—É—Å', value: '–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤...' }]
            };
        }

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let formatter;
        let title = checkType.toUpperCase() + (checkType === 'TCP_CONNECT' ? ' SCAN' : ' STATUS');

        switch (checkType) {
            case 'PING':
                formatter = formatPingResponse;
                break;
            case 'HTTP':
                formatter = formatHttpResponse;
                break;
            case 'TCP_CONNECT':
                formatter = (responses) => formatTcpResponse(responses, host, port);
                break;
            case 'DNS':
                formatter = formatDnsResponse;
                break;
            default:
                // –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                return formatErrorResult(checkType, host);
        }

        const formattedData = formatter(rawResult.responses, host);

        return {
            isPending: false, // –§–ª–∞–≥, —á—Ç–æ –æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            title: title,
            data: formattedData,
        };

    } catch (error) {
        console.error(`[API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${taskId}:`, error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500, —Ç–∞–π–º–∞—É—Ç), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
        return formatErrorResult(checkType, host);
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default instance;