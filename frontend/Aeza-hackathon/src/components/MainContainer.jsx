// components/MainContainer.jsx

import React, { useState, useMemo, useCallback, useEffect } from 'react';
import InputField from './InputField';
import NavButtons from './NavButtons';
import MapComponent from './MapComponent';
import InfoBlock from './InfoBlock';
import './MainContainer.css';
import { createCheck, getCheckResult } from '../utils/api'; // üí° –†–µ–∞–ª—å–Ω—ã–µ API-—Ñ—É–Ω–∫—Ü–∏–∏

// --- DUMMY_DATA (Fallback) ---
const DUMMY_DATA = {
    center: [47.2357, 39.712],
    countryData: '-',
    ipAddress: '178.76.255.88',
    dnsAddresses: Array(1).fill('77.52.38.64')
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è InfoBlock –ø—Ä–∏ –æ—à–∏–±–∫–µ/–∑–∞–≥—Ä—É–∑–∫–µ
const DUMMY_INFO_DATA = [
    { label: 'Host Name', value: '' },
    { label: 'IP Address', value: DUMMY_DATA.ipAddress },
    { label: 'Country', value: '-' },
    { label: 'Region', value: '-' },
    { label: 'Timezone', value: '-' },
];

// üí° –ü–ï–†–ï–ú–ï–ù–ù–´–ï: –ú–∞–ø–ø–∏–Ω–≥ –≤ API-—Ç–∏–ø—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç
const CHECK_TYPE_MAP = {
    'Ping': 'PING',
    'HTTP': 'HTTP',
    'TCP port': 'TCP_CONNECT',
    'UDP port': 'UDP port', // UDP –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±–µ–∫–µ
    'DNS': 'DNS',
};
const DEFAULT_PORT_MAP = {
    'HTTP': 80,
    'TCP port': 443, 
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ—Ä—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–≥–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ Polling
const POLLING_INTERVAL = 1500; // 1.5 —Å–µ–∫—É–Ω–¥—ã
const MAX_POLLING_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∏ "Info"
const createInfoData = (fullData, isLoading) => {
    if (isLoading) {
        return DUMMY_INFO_DATA.map(item => ({ ...item, value: '–ó–∞–≥—Ä—É–∑–∫–∞...' }));
    }
    if (fullData) {
        return [
            { label: 'Host Name', value: '' },
            { label: 'IP Address', value: fullData.query },
            { label: 'Country', value: fullData.country },
            { label: 'Region', value: fullData.regionName + (fullData.city ? `, ${fullData.city}` : '') },
            { label: 'Timezone', value: fullData.timezone || 'N/A' },
        ];
    }
    return DUMMY_INFO_DATA;
};

// üí° –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –û–ë–™–ï–ö–¢ –û–®–ò–ë–ö–ò
const SERVER_ERROR_DATA = [{ label: '–û—à–∏–±–∫–∞', value: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.' }];

function MainContainer({ userIp, userLocation, userFullData, isLoading }) {
    const [target, setTarget] = useState('ya.ru');
    const [activeTab, setActiveTab] = useState('Info');

    // üí° –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–í–ï–†–ö–ò
    const [checkResults, setCheckResults] = useState({}); // –•—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø—É –ø—Ä–æ–≤–µ—Ä–∫–∏
    const [checkLoading, setCheckLoading] = useState(false);
    const [currentTaskId, setCurrentTaskId] = useState(null);
    const [checkStartTime, setCheckStartTime] = useState(null);

    // üí° useMemo –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
    const currentIpData = useMemo(() => {
        if (!isLoading && userFullData) {
            return {
                center: [userFullData.lat, userFullData.lon],
                countryData: userLocation,
                ipAddress: userIp,
                dnsAddresses: DUMMY_DATA.dnsAddresses,
            };
        }
        return DUMMY_DATA;
    }, [isLoading, userFullData, userIp, userLocation]);

    // üí° useMemo –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∏ Info
    const currentInfoData = useMemo(() => createInfoData(userFullData, isLoading), [userFullData, isLoading]);


    // --- –õ–û–ì–ò–ö–ê –û–ü–†–û–°–ê (GET Polling) ---

    // üí° –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–∞ (–æ–¥–∏–Ω —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞)
    const pollCheckResult = useCallback(async (taskId, newTab, checkType, host, port, startTime) => {
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const result = await getCheckResult(taskId, checkType, host, port);

            // 1. –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω (isPending: false)
            if (result.isPending === false) {
                setCheckResults(prev => ({ ...prev, [newTab]: result }));
                setCheckLoading(false);
                setCurrentTaskId(null); // –û—á–∏—â–∞–µ–º ID, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
                return; 
            }

            // 2. –†–µ–∑—É–ª—å—Ç–∞—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ (isPending: true)
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞
            setCheckResults(prev => ({ 
                ...prev, 
                [newTab]: { 
                    title: newTab.toUpperCase(), 
                    data: [{ label: '–°—Ç–∞—Ç—É—Å', value: '–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤...' }] 
                } 
            }));

            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
            if (Date.now() - startTime > MAX_POLLING_DURATION) {
                throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.');
            }

            // 4. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ POLLING_INTERVAL
            setTimeout(() => {
                pollCheckResult(taskId, newTab, checkType, host, port, startTime);
            }, POLLING_INTERVAL);

        } catch (error) {
            // –û—à–∏–±–∫–∞ API –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
            setCheckResults(prev => ({ 
                ...prev, 
                [newTab]: { 
                    title: newTab.toUpperCase(), 
                    data: SERVER_ERROR_DATA 
                } 
            }));
            setCheckLoading(false);
            setCurrentTaskId(null); // –û—á–∏—â–∞–µ–º ID, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        }
    }, []); 

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò (POST + GET Polling) ---

    const startCheck = useCallback(async (newTab) => {
        const checkType = CHECK_TYPE_MAP[newTab];
        if (!checkType) return;

        // üí° 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ó–∞–≥—Ä—É–∑–∫–∞" –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –º–æ–∫
        setCheckLoading(true);
        setCheckResults(prev => ({ 
            ...prev, 
            [newTab]: { 
                title: newTab.toUpperCase(), 
                data: [{ label: '–°—Ç–∞—Ç—É—Å', value: '–ó–∞–≥—Ä—É–∑–∫–∞...' }] 
            } 
        }));
        setCurrentTaskId(null);

        try {
            const port = DEFAULT_PORT_MAP[newTab] || 0;

            // 2. POST /api/v1/check (–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)
            const task = await createCheck(target, checkType, port);
            
            const taskId = task.request_id;
            const startTime = Date.now();
            
            setCurrentTaskId(taskId);
            setCheckStartTime(startTime); 

            // 3. –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ–ø—Ä–æ—Å–∞ (Polling)
            pollCheckResult(taskId, newTab, checkType, target, port, startTime);

        } catch (error) {
            // üí° –û—à–∏–±–∫–∞ –ø—Ä–∏ POST-–∑–∞–ø—Ä–æ—Å–µ (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É)
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
            setCheckResults(prev => ({ 
                ...prev, 
                [newTab]: { 
                    title: newTab.toUpperCase(), 
                    data: SERVER_ERROR_DATA 
                } 
            }));
            setCheckLoading(false);
            setCurrentTaskId(null);
        }
    }, [target, pollCheckResult]);


    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ú–ï–ù–´ –í–ö–õ–ê–î–ö–ò ---
    const handleTabChange = useCallback((newTab) => {
        setActiveTab(newTab);

        // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ "Info" –∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if (newTab !== 'Info' && CHECK_TYPE_MAP[newTab] && !checkResults[newTab]) {
            startCheck(newTab);
        }
         // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –Ω–æ –º—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –¥—Ä—É–≥—É—é –≤–∫–ª–∞–¥–∫—É, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –µ–µ –ø—Ä–æ–≤–µ—Ä–∫—É
        if (newTab !== 'Info' && CHECK_TYPE_MAP[newTab] && !checkResults[newTab]) {
            startCheck(newTab);
        }
    }, [startCheck, checkResults]);


    // üí° –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const handleExecute = useCallback(() => {
        // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∏–¥–µ—Ç, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
        if (checkLoading) return;

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç Enter, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if (activeTab === 'Info') {
            // –ï—Å–ª–∏ –Ω–∞ Info, –∑–∞–ø—É—Å–∫–∞–µ–º Ping
            handleTabChange('Ping');
        } else {
            // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            startCheck(activeTab);
        }
    }, [activeTab, startCheck, handleTabChange, checkLoading]);


    // --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –í –ö–õ–ï–¢–ö–ê–• ---
    const getActiveTabData = useCallback((activeTab) => {
        // 1. –í–∫–ª–∞–¥–∫–∞ "Info" - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (activeTab === 'Info') {
            return { title: 'INFO (–í–∞—à IP)', data: currentInfoData };
        }

        // 2. –í–∫–ª–∞–¥–∫–∞ "–ó–∞–≥—Ä—É–∑–∫–∞" - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏)
        if (checkLoading && activeTab !== 'Info') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω pollCheckResult
            if (checkResults[activeTab]) {
                return checkResults[activeTab]; 
            }
            return { title: activeTab.toUpperCase(), data: [{ label: '–°—Ç–∞—Ç—É—Å', value: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞...' }] };
        }

        // 3. –í–∫–ª–∞–¥–∫–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç" - –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (checkResults[activeTab]) {
            return checkResults[activeTab];
        }

        // 4. –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è UDP –∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤)
        switch (activeTab) {
            case 'UDP port':
                return { title: 'UDP SCAN (–ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)', data: [{ label: '–°—Ç–∞—Ç—É—Å', value: '–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }] };
            default:
                // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                return { title: activeTab.toUpperCase(), data: [{ label: 'Data', value: '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏' }] };
        }
    }, [activeTab, checkLoading, checkResults, currentInfoData]);

    const tabData = getActiveTabData(activeTab);
    const isMultipleBlocks = Array.isArray(tabData);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Ping —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤
    const renderBlocks = isMultipleBlocks ? tabData : [tabData];


    return (
        <div className="main-container">

            <p className="label-text">–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É–∑–ª–∞ –∏–ª–∏ IP –∞–¥—Ä–µ—Å:</p>
            <InputField
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —É–∑–µ–ª –∏–ª–∏ IP –∞–¥—Ä–µ—Å"
                onExecute={handleExecute} // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Enter
            />

            <p className="label-text buttons-label">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ IP (Info) –∏–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ):</p>
            <NavButtons
                activeTab={activeTab}
                onTabChange={handleTabChange}
                disabled={checkLoading} // üí° –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            />
            <div className="content-map-layout">

                <MapComponent
                    center={currentIpData.center}
                    countryData={currentIpData.countryData}
                    ipAddress={currentIpData.ipAddress}
                    dnsAddresses={currentIpData.dnsAddresses}
                />

                <div className="info-blocks-wrapper">
                    {/* üí° –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
                    {renderBlocks.map((block, index) => (
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞
                        <InfoBlock 
                            key={index} 
                            title={block.title} 
                            data={block.data} 
                            isLoading={checkLoading && activeTab === block.title.split(' ')[0]} 
                        />
                    ))}
                </div>

            </div>

        </div>
    );
}

export default MainContainer;