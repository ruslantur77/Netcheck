// components/MainContainer.jsx

import React, { useState, useMemo, useCallback, useEffect } from 'react';
import InputField from './InputField';
import NavButtons from './NavButtons';
import MapComponent from './MapComponent';
import InfoBlock from './InfoBlock';
import './MainContainer.css';
import { createCheck, getCheckResult } from '../utils/api'; // üí° –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API

// --- DUMMY_DATA (Fallback) ---
const DUMMY_DATA = {
    center: [47.2357, 39.712],
    countryData: 'Russia (Rostov, Rostov-on-Don)',
    ipAddress: '178.76.255.88',
    dnsAddresses: Array(7).fill('77.52.38.64')
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è InfoBlock –ø—Ä–∏ –æ—à–∏–±–∫–µ/–∑–∞–≥—Ä—É–∑–∫–µ
const DUMMY_INFO_DATA = [
    { label: 'Host Name', value: '' },
    { label: 'IP Address', value: DUMMY_DATA.ipAddress },
    { label: 'Country', value: 'Russia' },
    { label: 'Region', value: 'Rostov-on-Don' },
    { label: 'Timezone', value: 'Europe/Moscow' },
];

// üí° –ü–ï–†–ï–ú–ï–ù–ù–´–ï: –ú–∞–ø–ø–∏–Ω–≥ –≤ API-—Ç–∏–ø—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç
const CHECK_TYPE_MAP = {
    'Ping': 'PING',
    'HTTP': 'HTTP',
    'TCP port': 'TCP_CONNECT',
    'UDP port': 'UDP port', // UDP –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –º–æ–∫–µ
    'DNS': 'DNS',
};
const DEFAULT_PORT_MAP = {
    'HTTP': 80,
    'TCP port': 443, // –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç 443 –∏–ª–∏ 80
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ—Ä—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–≥–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∏ "Info"
const createInfoData = (fullData, isLoading) => {
    if (isLoading) {
        return DUMMY_INFO_DATA.map(item => ({ ...item, value: '–ó–∞–≥—Ä—É–∑–∫–∞...' }));
    }
    if (fullData) {
        return [
            { label: 'Host Name', value: '' },
            { label: 'IP Address', value: fullData.query },
            { label: 'Country', value: fullData.country },
            { label: 'Region', value: fullData.regionName + (fullData.city ? `, ${fullData.city}` : '') },
            { label: 'Timezone', value: fullData.timezone || 'N/A' },
        ];
    }
    return DUMMY_INFO_DATA;
};

function MainContainer({ userIp, userLocation, userFullData, isLoading }) {
    const [target, setTarget] = useState('ya.ru');
    const [activeTab, setActiveTab] = useState('Info');

    // üí° –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–í–ï–†–ö–ò
    const [checkResults, setCheckResults] = useState({}); // –•—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø—É –ø—Ä–æ–≤–µ—Ä–∫–∏
    const [checkLoading, setCheckLoading] = useState(false);
    const [currentTaskId, setCurrentTaskId] = useState(null);

    // üí° useMemo –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
    const currentIpData = useMemo(() => {
        if (!isLoading && userFullData) {
            return {
                center: [userFullData.lat, userFullData.lon],
                countryData: userLocation,
                ipAddress: userIp,
                dnsAddresses: DUMMY_DATA.dnsAddresses,
            };
        }
        return DUMMY_DATA;
    }, [isLoading, userFullData, userIp, userLocation]);

    // üí° useMemo –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∏ Info
    const currentInfoData = useMemo(() => createInfoData(userFullData, isLoading), [userFullData, isLoading]);


    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò (POST + GET Polling) ---

    const startCheck = useCallback(async (newTab) => {
        const checkType = CHECK_TYPE_MAP[newTab];
        if (!checkType) return;

        setCheckLoading(true);
        setCheckResults(prev => ({ ...prev, [newTab]: { title: newTab, data: [{ label: '–°—Ç–∞—Ç—É—Å', value: '–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É...' }] } }));
        setCurrentTaskId(null);

        try {
            const port = DEFAULT_PORT_MAP[newTab] || 0;

            // 1. POST /api/v1/check (–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)
            const task = await createCheck(target, checkType, port);
            setCurrentTaskId(task.request_id);
            setCheckResults(prev => ({ ...prev, [newTab]: { title: newTab, data: [{ label: '–°—Ç–∞—Ç—É—Å', value: `–ó–∞–¥–∞—á–∞ ${task.request_id} —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...` }] } }));

            // 2. –ò–º–∏—Ç–∞—Ü–∏—è GET /api/v1/check/{task_id} (–û–ø—Ä–æ—Å)
            const result = await getCheckResult(task.request_id, checkType, target, port);

            // 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            setCheckResults(prev => ({ ...prev, [newTab]: result }));

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
            setCheckResults(prev => ({ ...prev, [newTab]: { title: newTab, data: [{ label: '–û—à–∏–±–∫–∞', value: `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: ${error.message}` }] } }));
        } finally {
            setCheckLoading(false);
            setCurrentTaskId(null);
        }
    }, [target]);


    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ú–ï–ù–´ –í–ö–õ–ê–î–ö–ò ---
    const handleTabChange = useCallback((newTab) => {
        setActiveTab(newTab);

        // –ï—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ "Info" (—Ç.–µ. —Ç—Ä–µ–±—É–µ—Ç API-–≤—ã–∑–æ–≤–∞), –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if (newTab !== 'Info' && CHECK_TYPE_MAP[newTab]) {
            startCheck(newTab);
        }
    }, [startCheck]);


    // üí° –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const handleExecute = useCallback(() => {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç Enter –Ω–∞ –≤–∫–ª–∞–¥–∫–µ 'Info', –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ 'Ping' –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (activeTab === 'Info') {
            handleTabChange('Ping');
        } else {
            // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            startCheck(activeTab);
        }
    }, [activeTab, startCheck, handleTabChange]);


    // --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –í –ö–õ–ï–¢–ö–ê–• ---
    const getActiveTabData = useCallback((activeTab) => {
        // 1. –í–∫–ª–∞–¥–∫–∞ "Info" - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (activeTab === 'Info') {
            return { title: 'INFO (–í–∞—à IP)', data: currentInfoData };
        }

        // 2. –í–∫–ª–∞–¥–∫–∞ "–ó–∞–≥—Ä—É–∑–∫–∞" - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (checkLoading && activeTab !== 'Info') {
            return { title: activeTab.toUpperCase(), data: [{ label: '–°—Ç–∞—Ç—É—Å', value: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞...' }] };
        }

        // 3. –í–∫–ª–∞–¥–∫–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç" - –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (checkResults[activeTab]) {
            return checkResults[activeTab];
        }

        // 4. –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è UDP –∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤)
        switch (activeTab) {
            case 'UDP port':
                return { title: 'UDP SCAN (–ú–û–ö)', data: [{ label: 'Port 53', value: 'Open/Filtered' }] };
            default:
                // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–æ–∫
                return { title: activeTab.toUpperCase(), data: [{ label: 'Data', value: '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏' }] };
        }
    }, [activeTab, checkLoading, checkResults, currentInfoData]);

    const tabData = getActiveTabData(activeTab);
    const isMultipleBlocks = Array.isArray(tabData);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Ping —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤
    const renderBlocks = isMultipleBlocks ? tabData : [tabData];


    return (
        <div className="main-container">

            <p className="label-text">–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É–∑–ª–∞ –∏–ª–∏ IP –∞–¥—Ä–µ—Å:</p>
            <InputField
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —É–∑–µ–ª –∏–ª–∏ IP –∞–¥—Ä–µ—Å"
                onExecute={handleExecute} // üí° –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Enter
            />

            <p className="label-text buttons-label">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ IP (Info) –∏–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ (–æ—Å—Ç–∞–ª—å–Ω—ã–µ):</p>
            <NavButtons
                activeTab={activeTab}
                onTabChange={handleTabChange}
            />
            <div className="content-map-layout">

                <MapComponent
                    center={currentIpData.center}
                    countryData={currentIpData.countryData}
                    ipAddress={currentIpData.ipAddress}
                    dnsAddresses={currentIpData.dnsAddresses}
                />

                <div className="info-blocks-wrapper">
                    {/* üí° –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
                    {renderBlocks.map((block, index) => (
                        <InfoBlock key={index} title={block.title} data={block.data} />
                    ))}
                </div>

            </div>

        </div>
    );
}

export default MainContainer;